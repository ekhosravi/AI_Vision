# -*- coding: utf-8 -*-
"""mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wYJFWLniHPDn6IxGuFKO0r42ahjJlBkW
"""

import keras
from keras.datasets import mnist
from keras.datasets import cifar10
import matplotlib.pyplot as plt
import cv2
from keras.layers import Flatten
import numpy as np

#Load
(train_images, train_labels), (test_images, test_labels) = cifar10.load_data() # mnist.load_data()
train_labels_Main = train_labels
test_labels_Main = test_labels

def ShowSomeImages(imgs , Lbls):
  for i in range(16):
    # define subplot
    plt.subplot(4, 4, i+1)
    # plot raw pixel data
    plt.imshow(imgs[i])
    plt.title(Lbls[i])

# show the figure
plt.show()

print(train_images.shape)

print(test_images.shape)

ShowSomeImages(train_images , train_labels_Main)

train_images = train_images.astype('float32')/255
test_images = test_images.astype('float32')/255

train_labels_Main

train_labels = keras.utils.to_categorical(train_labels_Main)
test_labels = keras.utils.to_categorical(test_labels_Main)

train_labels

from keras.models import Sequential
from keras.layers import Dense

model = Sequential()
model.add(Flatten())
model.add(Dense(250, activation='relu'))
model.add(Dense(128, activation='relu'))
model.add(Dense(10, activation='softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

model.fit(train_images, train_labels, epochs=10, batch_size=32)

model.summary()

test_loss, test_acc = model.evaluate(test_images, test_labels)
print(test_loss, test_acc)

from google.colab import drive
drive.mount('/content/drive')

!pwd

def switch(lang):

  match lang:
      case 0:
          return("airplane")

      case 1:
          return("automobile")

      case 2:
          return("bird")

      case 3:
          return("cat")

      case 4:
          return("deer")

      case 5:
          return("dog")

      case 6:
          return("frog")

      case 7:
          return("horse")

      case 8:
          return("ship")

      case 9:
          return("truck")

      case _:
          print("The image isn't Valid")

def LoadSampleData(img_name):
  img = cv2.imread('/content/drive/MyDrive/AI_Deep/' + img_name )
  img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

  plt.subplot(1, 2, 1)
  plt.imshow(img)
  plt.axis('off')
  print('shape of main image : ' ,img.shape)

  img_resized = cv2.resize(img, (32, 32))
  plt.subplot(1, 2, 2)
  plt.imshow(img_resized)
  plt.axis('off')
  img_flatten = img_resized.reshape(1, 3072)
  img_normalized = img_flatten.astype('float32')/255
  print('shape of prepared image : ' ,img_normalized.shape)
  plt.show()

  preds = model.predict(img_normalized)
  print('\nprediction of model : \n' , preds)

  predicted_label = np.argmax(preds)
  print('\npredicted label is : ' ,  switch(predicted_label))

LoadSampleData('frog.jfif')

LoadSampleData('car.png')

def Load_Test_Image(indx):
  t_image = test_images[indx].reshape(1, 3072)
  preds = model.predict(t_image)
  print('\nprediction of model : \n' ,preds)

  predicted_label = np.argmax(preds)
  plt.imshow(test_images[indx])
  print('\npredicted lable : ',switch(predicted_label))

  print('\ntest lable in dataset : ',switch(test_labels_Main[indx]))

Load_Test_Image(39)

Load_Test_Image(7655)

Load_Test_Image(765)